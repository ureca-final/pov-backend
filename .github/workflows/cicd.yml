name: AWS CI/CD TEST

on:
  pull_request:
    types: [ closed ]

env:
  AWS_REGION: ap-northeast-2
  AWS_S3_BUCKET: pov-s3-01

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      # Java 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Gradle 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle 빌드 실행
      - name: Build with Gradle
        run: ./gradlew build

      # 실행 가능한 JAR 파일 감지
      - name: Detect Executable JAR File
        id: detect_jar
        run: |
          JAR_FILE=$(ls build/libs/*-SNAPSHOT.jar | head -n 1)
          if [ -z "$JAR_FILE" ]; then
            echo "No executable JAR file found."
            exit 1
          fi
          echo "JAR_FILE=$JAR_FILE" >> $GITHUB_ENV

      # AWS 권한 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # S3 업로드
      - name: Upload to S3
        run: aws s3 cp --region ap-northeast-2 ${{ env.JAR_FILE }} s3://$AWS_S3_BUCKET/

      # SSH 등록
      - name: Add SSH Key
        run: |
          echo "${{ secrets.EC2_KEY_PAIR }}" > ~/pov-keypair.pem
          chmod 600 ~/pov-keypair.pem

      # 첫 번째 인스턴스 배포
      - name: Deploy to EC2 Instance 1
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP_01 }} >> ~/.ssh/known_hosts
          ssh -i ~/pov-keypair.pem ubuntu@${{ secrets.EC2_PUBLIC_IP_01 }} << 'EOF'
          export DB_URL="${{ secrets.DB_URL }}"
          export DB_ADMIN_USERNAME="${{ secrets.DB_ADMIN_USERNAME }}"
          export DB_ADMIN_PASSWORD="${{ secrets.DB_ADMIN_PASSWORD }}"
          export S3_ACCESS_KEY="${{ secrets.S3_ACCESS_KEY }}"
          export S3_SECRET_ACCESS_KEY="${{ secrets.S3_SECRET_ACCESS_KEY }}"
          export TMDB_ACCESS_TOKEN="${{ secrets.TMDB_ACCESS_TOKEN }}"
          export REDIS_HOST="${{ secrets.REDIS_HOST }}"
          export FIREBASE_CONFIG='${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          export TOSS_SECRET_KEY='${{ secrets.TOSS_SECRET_KEY }}'
          export NAVER_CLIENT_ID='${{ secrets.NAVER_CLIENT_ID }}'
          export NAVER_CLIENT_SECRET='${{ secrets.NAVER_CLIENT_SECRET }}'
  
          cd /home/ubuntu/pov-backend
          
          mkdir -p src/main/resources/firebase
          echo "$FIREBASE_CONFIG" > src/main/resources/firebase/firebase-service-account.json
          
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh
          EOF
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_ADMIN_USERNAME: ${{ secrets.DB_ADMIN_USERNAME }}
          DB_ADMIN_PASSWORD: ${{ secrets.DB_ADMIN_PASSWORD }}
          S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          S3_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
          TMDB_ACCESS_TOKEN: ${{ secrets.TMDB_ACCESS_TOKEN }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          TOSS_SECRET_KEY: ${{ secrets.TOSS_SECRET_KEY }}
          NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}

      # 두 번째 인스턴스 배포
      - name: Deploy to EC2 Instance 2
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP_02 }} >> ~/.ssh/known_hosts
          ssh -i ~/pov-keypair.pem ubuntu@${{ secrets.EC2_PUBLIC_IP_02 }} << 'EOF'
          export DB_URL="${{ secrets.DB_URL }}"
          export DB_ADMIN_USERNAME="${{ secrets.DB_ADMIN_USERNAME }}"
          export DB_ADMIN_PASSWORD="${{ secrets.DB_ADMIN_PASSWORD }}"
          export S3_ACCESS_KEY="${{ secrets.S3_ACCESS_KEY }}"
          export S3_SECRET_ACCESS_KEY="${{ secrets.S3_SECRET_ACCESS_KEY }}"
          export TMDB_ACCESS_TOKEN="${{ secrets.TMDB_ACCESS_TOKEN }}"
          export REDIS_HOST="${{ secrets.REDIS_HOST }}"
          export FIREBASE_CONFIG='${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          export TOSS_SECRET_KEY='${{ secrets.TOSS_SECRET_KEY }}'
          export NAVER_CLIENT_ID='${{ secrets.NAVER_CLIENT_ID }}'
          export NAVER_CLIENT_SECRET='${{ secrets.NAVER_CLIENT_SECRET }}'
          
          cd /home/ubuntu/pov-backend
          
          mkdir -p src/main/resources/firebase
          echo "$FIREBASE_CONFIG" > src/main/resources/firebase/firebase-service-account.json
          
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh
          EOF
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_ADMIN_USERNAME: ${{ secrets.DB_ADMIN_USERNAME }}
          DB_ADMIN_PASSWORD: ${{ secrets.DB_ADMIN_PASSWORD }}
          S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
          S3_SECRET_ACCESS_KEY: ${{ secrets.S3_SECRET_ACCESS_KEY }}
          TMDB_ACCESS_TOKEN: ${{ secrets.TMDB_ACCESS_TOKEN }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          TOSS_SECRET_KEY: ${{ secrets.TOSS_SECRET_KEY }}
          NAVER_CLIENT_ID: ${{ secrets.NAVER_CLIENT_ID }}
          NAVER_CLIENT_SECRET: ${{ secrets.NAVER_CLIENT_SECRET }}